import{_ as B,u as L,r as v,c as F,C as ee,d,i as C,e as l,f as e,g as y,m as b,k as p,I as f,t as a,p as q,x as U,D as O,F as A,l as N,G as te,H as V,o as se,n as ae,y as D,E as u}from"./index-JqcLm-KS.js";const ne={class:"modal"},ie={class:"modal-header"},oe={class:"modal-body"},re={class:"form-group"},ce={value:""},de=["value"],le=["onUpdate:modelValue","type","required"],ue={class:"form-check"},me={for:"enabled",class:"form-check-label"},ve={class:"modal-footer"},ye=["disabled"],pe={__name:"DnsServiceForm",props:{show:Boolean,service:Object,providers:Array},emits:["update:show","save"],setup(E,{emit:s}){const{t:j}=L(),g=E,h=s,r=v({provider:"",enabled:!0}),w=v(!1),z=F(()=>!!g.service),I=F(()=>g.providers.find(o=>o.id===r.value.provider)||{fields:[]});ee(()=>g.show,o=>{o&&g.service?r.value={...g.service}:o&&(r.value={provider:"",enabled:!0},g.providers.forEach(m=>{m.fields.forEach(c=>{r.value[c.name]=""})}))});function $(){(I.value.fields||[]).forEach(m=>{r.value[m.name]=""})}function k(){h("update:show",!1)}async function _(){w.value=!0;try{h("save",r.value),k()}finally{w.value=!1}}return(o,m)=>E.show?(l(),d("div",{key:0,class:"modal-overlay",onClick:q(k,["self"])},[e("div",ne,[e("div",ie,[e("h3",null,[y(p(f),{icon:z.value?"mdi:pencil":"mdi:plus",width:"20",height:"20"},null,8,["icon"]),b(" "+a(z.value?o.$t("dynamicDns.editService"):o.$t("dynamicDns.addService")),1)]),e("button",{class:"btn-icon",onClick:k},[y(p(f),{icon:"mdi:close",width:"20",height:"20"})])]),e("div",oe,[e("form",{onSubmit:q(_,["prevent"])},[e("div",re,[e("label",null,a(o.$t("dynamicDns.provider")),1),U(e("select",{"onUpdate:modelValue":m[0]||(m[0]=c=>r.value.provider=c),class:"form-control",onChange:$},[e("option",ce,"-- "+a(o.$t("dynamicDns.selectProvider"))+" --",1),(l(!0),d(A,null,N(E.providers,c=>(l(),d("option",{value:c.id,key:c.id},a(c.name),9,de))),128))],544),[[O,r.value.provider]])]),r.value.provider?(l(!0),d(A,{key:0},N(I.value.fields,c=>(l(),d("div",{key:c.name,class:"form-group"},[e("label",null,a(o.$t(c.label)),1),U(e("input",{"onUpdate:modelValue":S=>r.value[c.name]=S,type:c.type,required:c.required,class:"form-control"},null,8,le),[[te,r.value[c.name]]])]))),128)):C("",!0),e("div",ue,[U(e("input",{type:"checkbox","onUpdate:modelValue":m[1]||(m[1]=c=>r.value.enabled=c),id:"enabled",class:"form-check-input"},null,512),[[V,r.value.enabled]]),e("label",me,a(o.$t("dynamicDns.enabled")),1)]),e("div",ve,[e("button",{type:"button",class:"btn btn-secondary",onClick:k},a(o.$t("dynamicDns.cancel")),1),e("button",{type:"submit",class:"btn btn-primary",disabled:w.value},a(w.value?o.$t("dynamicDns.saving"):o.$t("dynamicDns.save")),9,ye)])],32)])])])):C("",!0)}},he=B(pe,[["__scopeId","data-v-d0674cf5"]]),P=[{id:"noip",name:"No-IP",icon:"mdi:ip-network-outline",fields:[{name:"hostname",label:"dynamicDns.hostname",type:"text",required:!0},{name:"username",label:"dynamicDns.username",type:"text",required:!0},{name:"password",label:"dynamicDns.password",type:"password",required:!0}]},{id:"dyndns",name:"DynDNS",icon:"mdi:ip",fields:[{name:"hostname",label:"dynamicDns.hostname",type:"text",required:!0},{name:"username",label:"dynamicDns.username",type:"text",required:!0},{name:"password",label:"dynamicDns.password",type:"password",required:!0}]},{id:"duckdns",name:"DuckDNS",icon:"mdi:duck",fields:[{name:"hostname",label:"dynamicDns.hostname",type:"text",required:!0},{name:"token",label:"dynamicDns.token",type:"password",required:!0}]},{id:"cloudflare",name:"Cloudflare",icon:"mdi:cloud",fields:[{name:"zone_id",label:"dynamicDns.zoneId",type:"text",required:!0},{name:"record_id",label:"dynamicDns.recordId",type:"text",required:!0},{name:"api_key",label:"dynamicDns.apiKey",type:"password",required:!0},{name:"email",label:"dynamicDns.email",type:"email",required:!0}]}],fe={dynamicDns:{title:"Dynamic DNS",configuredServices:"Configured Services",addService:"Add Service",editService:"Edit Service",service:"Service",hostname:"Hostname",username:"Username",password:"Password",token:"Token",apiKey:"API Key",email:"Email",zoneId:"Zone ID",recordId:"Record ID",lastUpdate:"Last Update",lastUpdateNever:"Never",status:"Status",actions:"Actions",provider:"Provider",enabled:"Enabled",settings:"Settings",updateInterval:"Update Interval",forceIpv4:"Force IPv4",forceIpv6:"Force IPv6",saveSettings:"Save Settings",save:"Save",cancel:"Cancel",selectProvider:"Select Provider",statuses:{active:"Active",error:"Error",disabled:"Disabled",pending:"Pending"},intervals:{"15m":"Every 15 minutes","30m":"Every 30 minutes","1h":"Every hour","2h":"Every 2 hours","6h":"Every 6 hours","12h":"Every 12 hours","24h":"Every 24 hours"},updateStatus:{success:"Update successful",failed:"Update failed",inProgress:"Update in progress"},fetchError:"Failed to load data",testSuccess:"Connection test successful",testFailed:"Connection test failed",testError:"Error during connection test",confirmDelete:"Are you sure you want to delete this service?",deleteError:"Failed to delete service",serviceDeleted:"Service deleted successfully",saveSettingsError:"Failed to save settings",saveServiceError:"Failed to save service",saving:"Saving...",edit:"Edit",test:"Test connection",delete:"Delete",noServices:"No services configured",serviceAdded:"Service added successfully",serviceUpdated:"Service updated successfully",settingsSaved:"Settings saved successfully",success:"Success",error:"Error",confirmDeleteTitle:"Confirm deletion",confirmDeleteMessage:"Are you sure you want to delete this service?",automaticUpdates:"Automatic Updates",cronDescription:"Automatic updates are configured to run every 30 minutes",lastAutoUpdate:"Last automatic update",updateNow:"Update now",cronDescription:"Automatic updates are configured to run every 30 minutes",lastAutoUpdate:"Last automatic update",updateNow:"Update now",cronUpdated:"Cron job updated to run every {interval}",installCron:"Enable automatic updates",installing:"Installing...",cronInstalled:"Automatic updates enabled successfully",cronInstallError:"Failed to enable automatic updates"}},ge={dynamicDns:{title:"Dynamiczny DNS",configuredServices:"Skonfigurowane usługi",addService:"Dodaj usługę",editService:"Edytuj usługę",service:"Usługa",hostname:"Nazwa hosta",username:"Nazwa użytkownika",password:"Hasło",token:"Token",apiKey:"Klucz API",email:"Email",zoneId:"ID strefy",recordId:"ID rekordu",lastUpdate:"Ostatnia aktualizacja",lastUpdateNever:"Nigdy",status:"Status",actions:"Akcje",provider:"Dostawca",enabled:"Włączony",settings:"Ustawienia",updateInterval:"Interwał aktualizacji",forceIpv4:"Wymuś IPv4",forceIpv6:"Wymuś IPv6",saveSettings:"Zapisz ustawienia",save:"Zapisz",cancel:"Anuluj",selectProvider:"Wybierz dostawcę",statuses:{active:"Aktywny",error:"Błąd",disabled:"Wyłączony",pending:"Oczekujący"},intervals:{"15m":"Co 15 minut","30m":"Co 30 minut","1h":"Co godzinę","2h":"Co 2 godziny","6h":"Co 6 godzin","12h":"Co 12 godzin","24h":"Co 24 godziny"},updateStatus:{success:"Aktualizacja udana",failed:"Aktualizacja nieudana",inProgress:"Trwa aktualizacja"},fetchError:"Nie udało się załadować danych",testSuccess:"Test połączenia zakończony sukcesem",testFailed:"Test połączenia nie powiódł się",testError:"Błąd podczas testowania połączenia",confirmDelete:"Czy na pewno chcesz usunąć tę usługę?",deleteError:"Nie udało się usunąć usługi",serviceDeleted:"Usługa usunięta pomyślnie",saveSettingsError:"Nie udało się zapisać ustawień",saveServiceError:"Nie udało się zapisać usługi",saving:"Zapisywanie...",edit:"Edytuj",test:"Testuj połączenie",delete:"Usuń",noServices:"Brak skonfigurowanych usług",serviceAdded:"Usługa dodana pomyślnie",serviceUpdated:"Usługa zaktualizowana pomyślnie",settingsSaved:"Ustawienia zapisane pomyślnie",success:"Sukces",error:"Błąd",confirmDeleteTitle:"Potwierdź usunięcie",confirmDeleteMessage:"Czy na pewno chcesz usunąć tę usługę?",automaticUpdates:"Automatyczne Aktualizacje",cronDescription:"Automatyczne aktualizacje są wykonywane co 30 minut",lastAutoUpdate:"Ostatnia automatyczna aktualizacja",updateNow:"Aktualizuj teraz",cronDescription:"Automatyczne aktualizacje są wykonywane co 30 minut",lastAutoUpdate:"Ostatnia automatyczna aktualizacja",updateNow:"Aktualizuj teraz",cronUpdated:"Zadanie cron zaktualizowane do wykonywania co {interval}",installCron:"Włącz automatyczne aktualizacje",installing:"Instalowanie...",cronInstalled:"Automatyczne aktualizacje włączone pomyślnie",cronInstallError:"Nie udało się włączyć automatycznych aktualizacji"}},De={class:"dynamic-dns"},we={class:"header"},ke={class:"card"},be={class:"card-header"},Se=["disabled"],ze=["disabled"],Ie={class:"card-body"},$e={key:0},Ue={class:"card"},_e={class:"card-header"},Ee={class:"card-body"},Ce={key:0,class:"loading"},Ae={key:1,class:"error"},Ne={key:2,class:"no-services"},je={key:3,class:"service-table"},Pe={class:"actions"},Fe=["onClick","title"],qe=["onClick","title"],Ve=["onClick","title"],Te={class:"card"},Me={class:"card-header"},Be={class:"card-body"},Le={class:"form-group"},Oe=["value"],We={class:"form-check"},Ke={for:"forceIpv4",class:"form-check-label"},Ze={class:"form-check"},He={for:"forceIpv6",class:"form-check-label"},Re=["disabled"],Ge={__name:"DynamicDns",setup(E){const{t:s,mergeLocaleMessage:j}=L();j("en",fe),j("pl",ge);const g=v([]),h=v({updateInterval:"30m",forceIpv4:!1,forceIpv6:!1}),r=v(!1),w=v(null),z=v(!1),I=v(null),$=v(!1),k=v(null),_=v(!1),o=v(!1),m=v(!1),c=F(()=>[{value:"15m",title:s("dynamicDns.intervals.15m")},{value:"30m",title:s("dynamicDns.intervals.30m")},{value:"1h",title:s("dynamicDns.intervals.1h")},{value:"2h",title:s("dynamicDns.intervals.2h")},{value:"6h",title:s("dynamicDns.intervals.6h")},{value:"12h",title:s("dynamicDns.intervals.12h")},{value:"24h",title:s("dynamicDns.intervals.24h")}]);async function S(){try{z.value=!0,I.value=null;const[t,i]=await Promise.all([D.get("/network/dynamic-dns"),D.get("/network/dynamic-dns/settings")]);g.value=t.data.services,h.value=i.data.settings}catch(t){console.error("Error fetching data:",t),I.value=s("dynamicDns.fetchError")}finally{z.value=!1}}function W(t){const i=P.find(n=>n.id===t);return i?i.name:t}function K(t){const i=P.find(n=>n.id===t);return i?i.icon:"mdi:help-circle"}function T(t){return new Date(t).toLocaleString()}function Z(){w.value=null,r.value=!0}function H(t){w.value={...t},r.value=!0}async function R(t){try{(await D.post(`/network/dynamic-dns/${t.id}/update`)).data.success?(u({title:s("dynamicDns.success"),message:s("dynamicDns.testSuccess"),type:"success"}),await S()):u({title:s("dynamicDns.error"),message:s("dynamicDns.testFailed"),type:"error"})}catch(i){console.error("Error testing service:",i),u({title:s("dynamicDns.error"),message:s("dynamicDns.testError"),type:"error"})}}async function G(t){try{await D.delete(`/network/dynamic-dns/${t}`),u({title:s("dynamicDns.success"),message:s("dynamicDns.serviceDeleted"),type:"success"}),await S()}catch(i){console.error("Error deleting service:",i),u({title:s("dynamicDns.error"),message:s("dynamicDns.deleteError"),type:"error"})}}async function J(){try{$.value=!0;const t=await D.post("/network/dynamic-dns/settings",{settings:h.value});u({title:s("dynamicDns.success"),message:s("dynamicDns.settingsSaved")+". "+s("dynamicDns.cronUpdated",{interval:h.value.updateInterval}),type:"success",duration:5e3})}catch(t){console.error("Error saving settings:",t),u({title:s("dynamicDns.error"),message:s("dynamicDns.saveSettingsError"),type:"error"})}finally{$.value=!1}}async function Q(t){try{t.id?(await D.put(`/network/dynamic-dns/${t.id}`,t),u({title:s("dynamicDns.success"),message:s("dynamicDns.serviceUpdated"),type:"success"})):(await D.post("/network/dynamic-dns",t),u({title:s("dynamicDns.success"),message:s("dynamicDns.serviceAdded"),type:"success"})),await S()}catch(i){console.error("Error saving service:",i),u({title:s("dynamicDns.error"),message:s("dynamicDns.saveServiceError"),type:"error"})}}async function X(){try{_.value=!0,u({title:s("dynamicDns.automaticUpdates"),message:s("dynamicDns.updateStatus.inProgress"),type:"info"});const t=await D.get("/network/dynamic-dns/update-all");k.value=new Date().toISOString(),u({title:s("dynamicDns.automaticUpdates"),message:s("dynamicDns.updateStatus.success"),type:"success"}),await S()}catch{u({title:s("dynamicDns.automaticUpdates"),message:s("dynamicDns.updateStatus.failed"),type:"error"})}finally{_.value=!1}}async function Y(){try{const t=await D.get("/network/dynamic-dns/cron-status");o.value=t.data.installed}catch(t){console.error("Error checking cron status:",t)}}async function x(){try{m.value=!0,(await D.post("/network/dynamic-dns/install-cron")).data.success&&(u({title:s("dynamicDns.success"),message:s("dynamicDns.cronInstalled"),type:"success"}),o.value=!0)}catch{u({title:s("dynamicDns.error"),message:s("dynamicDns.cronInstallError"),type:"error"})}finally{m.value=!1}}return se(()=>{S(),Y()}),(t,i)=>(l(),d("div",De,[e("div",we,[e("h2",null,[y(p(f),{icon:"mdi:ip-network",width:"24",height:"24"}),b(" "+a(t.$t("dynamicDns.title")),1)])]),e("div",ke,[e("div",be,[e("h3",null,[y(p(f),{icon:"mdi:clock-outline",width:"20",height:"20"}),b(" "+a(t.$t("dynamicDns.automaticUpdates")),1)]),o.value?C("",!0):(l(),d("button",{key:0,class:"btn btn-secondary btn-sm",onClick:x,disabled:m.value},[y(p(f),{icon:"mdi:calendar-clock",width:"16",height:"16",class:"mr-2"}),b(" "+a(m.value?t.$t("dynamicDns.installing"):t.$t("dynamicDns.installCron")),1)],8,Se)),e("button",{class:"btn btn-secondary btn-sm",onClick:X,disabled:_.value},[y(p(f),{icon:"mdi:refresh",width:"16",height:"16",class:"mr-2"}),b(" "+a(t.$t("dynamicDns.updateNow")),1)],8,ze)]),e("div",Ie,[e("p",null,a(t.$t("dynamicDns.cronDescription")),1),k.value?(l(),d("p",$e,a(t.$t("dynamicDns.lastAutoUpdate"))+": "+a(T(k.value)),1)):C("",!0)])]),e("div",Ue,[e("div",_e,[e("h3",null,a(t.$t("dynamicDns.configuredServices")),1),e("button",{class:"btn btn-primary",onClick:Z},[y(p(f),{icon:"mdi:plus",width:"16",height:"16",class:"mr-2"}),b(" "+a(t.$t("dynamicDns.addService")),1)])]),e("div",Ee,[z.value?(l(),d("div",Ce,a(t.$t("dynamicDns.saving")),1)):I.value?(l(),d("div",Ae,a(t.$t("dynamicDns.fetchError")),1)):g.value.length===0?(l(),d("div",Ne,a(t.$t("dynamicDns.noServices")),1)):(l(),d("table",je,[e("thead",null,[e("tr",null,[e("th",null,a(t.$t("dynamicDns.service")),1),e("th",null,a(t.$t("dynamicDns.hostname")),1),e("th",null,a(t.$t("dynamicDns.username")),1),e("th",null,a(t.$t("dynamicDns.lastUpdate")),1),e("th",null,a(t.$t("dynamicDns.status")),1),e("th",null,a(t.$t("dynamicDns.actions")),1)])]),e("tbody",null,[(l(!0),d(A,null,N(g.value,n=>(l(),d("tr",{key:n.id},[e("td",null,[y(p(f),{icon:K(n.provider),width:"20",height:"20"},null,8,["icon"]),b(" "+a(W(n.provider)),1)]),e("td",null,a(n.hostname),1),e("td",null,a(n.username),1),e("td",null,a(n.lastUpdate?T(n.lastUpdate):t.$t("dynamicDns.lastUpdateNever")),1),e("td",null,[e("span",{class:ae(["status-badge","status-"+n.status])},a(t.$t(`dynamicDns.statuses.${n.status}`)),3)]),e("td",Pe,[e("button",{class:"btn-icon",onClick:M=>H(n),title:t.$t("dynamicDns.edit")},[y(p(f),{icon:"mdi:pencil",width:"18",height:"18"})],8,Fe),e("button",{class:"btn-icon",onClick:M=>R(n),title:t.$t("dynamicDns.test")},[y(p(f),{icon:"mdi:connection",width:"18",height:"18"})],8,qe),e("button",{class:"btn-icon btn-danger",onClick:M=>G(n.id),title:t.$t("dynamicDns.delete")},[y(p(f),{icon:"mdi:delete",width:"18",height:"18"})],8,Ve)])]))),128))])]))])]),e("div",Te,[e("div",Me,[e("h3",null,[y(p(f),{icon:"mdi:cog",width:"20",height:"20"}),b(" "+a(t.$t("dynamicDns.settings")),1)])]),e("div",Be,[e("form",{onSubmit:q(J,["prevent"]),class:"settings-form"},[e("div",Le,[e("label",null,a(t.$t("dynamicDns.updateInterval")),1),U(e("select",{"onUpdate:modelValue":i[0]||(i[0]=n=>h.value.updateInterval=n),class:"form-control"},[(l(!0),d(A,null,N(c.value,n=>(l(),d("option",{value:n.value,key:n.value},a(n.title),9,Oe))),128))],512),[[O,h.value.updateInterval]])]),e("div",We,[U(e("input",{type:"checkbox","onUpdate:modelValue":i[1]||(i[1]=n=>h.value.forceIpv4=n),id:"forceIpv4",class:"form-check-input"},null,512),[[V,h.value.forceIpv4]]),e("label",Ke,a(t.$t("dynamicDns.forceIpv4")),1)]),e("div",Ze,[U(e("input",{type:"checkbox","onUpdate:modelValue":i[2]||(i[2]=n=>h.value.forceIpv6=n),id:"forceIpv6",class:"form-check-input"},null,512),[[V,h.value.forceIpv6]]),e("label",He,a(t.$t("dynamicDns.forceIpv6")),1)]),e("button",{type:"submit",class:"btn btn-primary",disabled:$.value},a($.value?t.$t("dynamicDns.saving"):t.$t("dynamicDns.saveSettings")),9,Re)],32)])]),y(he,{show:r.value,service:w.value,providers:p(P),"onUpdate:show":i[3]||(i[3]=n=>r.value=n),onSave:Q},null,8,["show","service","providers"])]))}},Qe=B(Ge,[["__scopeId","data-v-e63f4ac4"]]);export{Qe as default};
